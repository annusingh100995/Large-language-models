1. LLM Brochure Making using Gemini-2.0-flash. 
Created an pipeline in juptyter nptebook. In this I have written code to scrape a website. The using langchain_google_genai library to make query to Gemini to first filter relevant links that were previously scraped and then make a textual brochure about the company. It's mission, culture, careers and anything intering it found on the website.

2. RAG using Gemini
Created a jupyter notbook to explore RAG on pdfs.
I loaded a pdf file using PyPDFloader from langchain community funtions. Created chunks using RecursiveCharacterTextSplitter fro langchain.Created embedding using GoogleGenerativeAIEmbeddings using the embedding-001 model. Used Chroma from langchain to create a vectore store. Then fetched relevant documents for a give query using retriver initiated on the previously created vectorstore. Then instantiated Gemini-2.0-flash model using ChatGoogleGenerativeAI from langchain. Created a chain to query the llm updated with the relevatn documents form the pdf.

3. Explored different splitter namely CharacterTextSplitter,
RecursiveCharacterTextSplitter, SentenceTransformersTokenTextSplitter,
TextSplitter,TokenTextSplitter from langchain using fro splitting text for createing vectorstore for RAG pipeline.

4. Explored chain concept in langchain.
4.1 Created a simple prompt | model | StringOutputParser chain
4.2 Created a branched chain using langchain with the following flow
    CLassification Prompt
            |
            v
    Classification Model
            |
            v
    StringOutput (That could be Positive/Negative/Neutral/Escalate)
            |
            v
        Branches
    |    |    |    |
    v    v    v    v
    P    N   Neu   E
And based on the StringOutput it will activate either of the branch which is itself a chain
P = positive_feedback_template_prompt | Model | StringOutputParser
same for N, Neu, E.
4.3 Created a parallel branching system.
Instanliated Gemini-2.0-flash to be an expert product reviwer, it will give features about an input product. Created a pros branch that will list the pros of the prodcut based on features generated by the model. Similarly a parallel cons branch that will generate cons of the input product based on the features generated by the model.
Created these chain using the RunnableLambda from lanchain.schema.runnable

5. Simple Chatbot
Created a simple chatbot. Instantiated Google's Gemini-2.0-flash model using openai framework to allow streaming. Created a simple chat bot that will reply to messages. Used tools to make it tad bit intelligent. Used Gradio to create a UI.
